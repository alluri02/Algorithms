1. Find the longest substring of given string containing k distinct characters
Given a string and a positive number k, find the longest substring of a given string containing k distinct characters. If k is more than the number of distinct characters in the string, return the whole string.	

2. Find all substrings of a string that are permutation of a given string
Find all substrings of a string that contains all characters of another string. In other words, find all substrings of the first string that are anagrams of the second string.

3. Longest substring of given string containing distinct characters
Given a string, find the longest substring of a given string containing distinct characters.

4. Find index of 0 to be replaced to get maximum length sequence of continuous ones
Given a binary array, find the index of 0 to be replaced with 1 to get the maximum length sequence of continuous ones.

5. Find the maximum sequence of continuous 1’s that can be formed by replacing at-most k zeros by ones
Given a Boolean array, find the maximum sequence of continuous 1’s that can be formed by replacing at-most k zeros by ones.

6. Find minimum sum subarray of given size k
Given an array of integers, find minimum sum sub-array of given size k.

7. Find subarray having given sum in given array of integers
Given an array of integers, find a sub-array having given sum in it.

8. Find the length of smallest subarray whose sum of elements is greater than the given number
Given an array of integers, find the length of the smallest subarray whose sum of elements is greater than the given positive number.

9. Find count of distinct elements in every sub-array of size k
Given an array and an integer k, find the count of distinct elements in every sub-array of size k in the array.

10. Print all sub-arrays of an array having distinct elements
Given an array of integers, print all maximum size sub-arrays having all distinct elements in them.

11. Find duplicates within given range k in an array
Given an array and a positive number k, check weather the array contains any duplicate elements within range k. If k is more than the size of the array, the solution should check for duplicates in the complete array.




6 1 2 5 4 -1 7
N = 7
K = 3

1.find max sum in the k sized window of array

Approach - 1 
O(nk) 

Approach - 2
Sliding window 

sum=0, maxSum = 0
for(int i=0;i<k;i++){
	sum += arr[i]
}
maxSum = sum;

for(int i=k;i<n;i++){
	sum = sum - arr[i-k] + arr[i]
	maxSum = max(maxSum, sum)
}

return maxSum;
O(n)


2. find max Avg with k size window

above approach divide by k

float/double


3. print max element in the k-window

A - 6 1 2 5 4 -1 7

o/p - 6 5 5 5 7

can we use any datastructure - 
max priority queue/heap of k size 

PriorityQueue<Integer> pq = new PriorityQueue<>()

pq.remove(arr[i-k])
pq.add(arr[i])
pq.peek()

time complexity - O(2nlog(k))
space complexity - O(k)


there is another approach

using dequue - double ended queue
K
A - 6 1 2 5 4 -1 7
0 3
print element 0
4-0 > k (3)

6 2 
print 6 
remove 6
5 
print 5
5 4
print 5
5 4 -1
print 5 
7
print 7


Find the longest substring of given string containing distinct characters

abcadefdhelephants

ab  cdb

set - a
if character not contains 
add the character into set using end
end++
else 
remove the character from set using start 
start++


set - distinct characters


2 steps 
1. expansion step
2. compression step

int findLongestDistinct(String str){

	//base condition
	if(str == null || str.length() == 0)
	  return 0;
	  
	int start=0, end=0, maxLen = 0;
	abcbcad
	int len = str.length();
	Set<Character, Integer> map = new HashMap<>();
	a b a bacd 
	while(end < len){
		if(map.keyset().size()<=k){
			map.put(str[end], map.getOrDefault(str[end],0)+1);
			maxLen = max(maxLen, end-start+1);
			end++;
		} else {
			int count = map.get(str[i]);
			if(count-1 == 0 )
			   map.remove(str[i]);
			map.put(str[i], count-1);
			start++;
			//maxLen = max(maxLen, end-start+1);
		}
	}
	
	return maxLen;
}
  


abcdabc

sliding window 
containing max 1s with only one zero 

start = 0, end = 0
allowedZeros = 0;
while(end < n){
	if(arr[end] == 1 || allowedZeros < k ){
	  if(arr[end] == 0){
	    result = end;
		allowedZeros++;
	  }
	  end++;
	  maxLen = max(maxLen, end-start+1);
	}
	else 
	  start++;

return result;
}


k = 3
1 2 1 2 4 5 6 3 3 1 5 4 2
o/p - 2 2 3 3

map - with counter 

1 2 1 3 5 4 6    10

6 5 4 3 1 2 1
start 0 1 
end 0 1 2 3
sum 6 11 5 9 12
 
minWind - 10000, 2, 2 

int findMinWindLen(){
	int start = 0, end = 0 , int minWindLen = Integer.MAX_VALUE;
	int curSum = arr[end];
	while(end < n){
		if(curSum <= sum){
			end++;
			curSum+= arr[end];
		} else {
			minWindLen = min(end-start+1, minWindLen);
			curSum = curSum - arr[start];
			start++;
		}
	}

}